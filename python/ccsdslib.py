# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ccsdslib
else:
    import _ccsdslib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccsdslib.delete_SwigPyIterator

    def value(self):
        return _ccsdslib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ccsdslib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ccsdslib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ccsdslib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ccsdslib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ccsdslib.SwigPyIterator_copy(self)

    def next(self):
        return _ccsdslib.SwigPyIterator_next(self)

    def __next__(self):
        return _ccsdslib.SwigPyIterator___next__(self)

    def previous(self):
        return _ccsdslib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ccsdslib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ccsdslib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ccsdslib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ccsdslib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ccsdslib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ccsdslib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ccsdslib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ccsdslib:
_ccsdslib.SwigPyIterator_swigregister(SwigPyIterator)

class CCSDSprimaryHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packet_version = property(_ccsdslib.CCSDSprimaryHeader_packet_version_get, _ccsdslib.CCSDSprimaryHeader_packet_version_set)
    packet_type = property(_ccsdslib.CCSDSprimaryHeader_packet_type_get, _ccsdslib.CCSDSprimaryHeader_packet_type_set)
    sec_hdr_flag = property(_ccsdslib.CCSDSprimaryHeader_sec_hdr_flag_get, _ccsdslib.CCSDSprimaryHeader_sec_hdr_flag_set)
    apid = property(_ccsdslib.CCSDSprimaryHeader_apid_get, _ccsdslib.CCSDSprimaryHeader_apid_set)
    seq_flags = property(_ccsdslib.CCSDSprimaryHeader_seq_flags_get, _ccsdslib.CCSDSprimaryHeader_seq_flags_set)
    packet_count_or_name = property(_ccsdslib.CCSDSprimaryHeader_packet_count_or_name_get, _ccsdslib.CCSDSprimaryHeader_packet_count_or_name_set)
    packet_length = property(_ccsdslib.CCSDSprimaryHeader_packet_length_get, _ccsdslib.CCSDSprimaryHeader_packet_length_set)

    def __init__(self):
        _ccsdslib.CCSDSprimaryHeader_swiginit(self, _ccsdslib.new_CCSDSprimaryHeader())
    __swig_destroy__ = _ccsdslib.delete_CCSDSprimaryHeader

# Register CCSDSprimaryHeader in _ccsdslib:
_ccsdslib.CCSDSprimaryHeader_swigregister(CCSDSprimaryHeader)

class CCSDSsecondaryHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    seconds = property(_ccsdslib.CCSDSsecondaryHeader_seconds_get, _ccsdslib.CCSDSsecondaryHeader_seconds_set)
    subseconds = property(_ccsdslib.CCSDSsecondaryHeader_subseconds_get, _ccsdslib.CCSDSsecondaryHeader_subseconds_set)

    def __init__(self):
        _ccsdslib.CCSDSsecondaryHeader_swiginit(self, _ccsdslib.new_CCSDSsecondaryHeader())
    __swig_destroy__ = _ccsdslib.delete_CCSDSsecondaryHeader

# Register CCSDSsecondaryHeader in _ccsdslib:
_ccsdslib.CCSDSsecondaryHeader_swigregister(CCSDSsecondaryHeader)

class ParamNameType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_ccsdslib.ParamNameType_name_get, _ccsdslib.ParamNameType_name_set)
    type = property(_ccsdslib.ParamNameType_type_get, _ccsdslib.ParamNameType_type_set)

    def __init__(self):
        _ccsdslib.ParamNameType_swiginit(self, _ccsdslib.new_ParamNameType())
    __swig_destroy__ = _ccsdslib.delete_ParamNameType

# Register ParamNameType in _ccsdslib:
_ccsdslib.ParamNameType_swigregister(ParamNameType)

class CCSDS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ccsdslib.CCSDS_swiginit(self, _ccsdslib.new_CCSDS())
    __swig_destroy__ = _ccsdslib.delete_CCSDS

    def newPacketField(self, *args):
        return _ccsdslib.CCSDS_newPacketField(self, *args)

    def xmlPacketDesc(self, file_path, root_node):
        return _ccsdslib.CCSDS_xmlPacketDesc(self, file_path, root_node)

    def xtceAPID(self):
        return _ccsdslib.CCSDS_xtceAPID(self)

    def xtceSecHdrFlag(self):
        return _ccsdslib.CCSDS_xtceSecHdrFlag(self)

    def xtceVersion(self):
        return _ccsdslib.CCSDS_xtceVersion(self)

    def xtceType(self):
        return _ccsdslib.CCSDS_xtceType(self)

    def loadPacketFile(self, file_path):
        return _ccsdslib.CCSDS_loadPacketFile(self, file_path)

    def decodePacketBytes(self, file_bytes):
        return _ccsdslib.CCSDS_decodePacketBytes(self, file_bytes)

    def primaryHeader(self):
        return _ccsdslib.CCSDS_primaryHeader(self)

    def secondaryHeader(self):
        return _ccsdslib.CCSDS_secondaryHeader(self)

    def loadFrameFile(self, file_path):
        return _ccsdslib.CCSDS_loadFrameFile(self, file_path)

    def decodeFrameBytes(self, file_bytes):
        return _ccsdslib.CCSDS_decodeFrameBytes(self, file_bytes)

    def packetFields(self):
        return _ccsdslib.CCSDS_packetFields(self)

    def encodePacketBytes(self, *args):
        return _ccsdslib.CCSDS_encodePacketBytes(self, *args)

    def encodeCommand(self, command_header, command):
        return _ccsdslib.CCSDS_encodeCommand(self, command_header, command)

# Register CCSDS in _ccsdslib:
_ccsdslib.CCSDS_swigregister(CCSDS)



